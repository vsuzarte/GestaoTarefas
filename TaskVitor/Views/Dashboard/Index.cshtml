@model TaskVitor.Models.Dashboard
@using System.Text.Json

<div class="container-fluid dashboard-container">
	<h2 class="dashboard-title">📊 Dashboard de Tarefas</h2>

	<div class="container-fluid mb-4">
		<div class="row align-items-center">
			<div class="col-md-6">
				<h3 class="mb-0">🚀 Sprint Atual</h3>
				<p class="text-muted">
					Período: <strong>@Model.DataInicio.ToString("dd/MM/yyyy")</strong> até <strong>@Model.DataFim.ToString("dd/MM/yyyy")</strong>
				</p>
			</div>
			<div class="col-md-6 text-md-end">
				<form method="get" class="d-flex justify-content-md-end align-items-center">
					<label for="dataInicio" class="me-2 mb-0 fw-semibold">Início:</label>
					<input type="date" id="dataInicio" name="dataInicio" value="@Model.DataInicio.ToString("yyyy-MM-dd")" class="form-control me-3" />

					<label for="dataFim" class="me-2 mb-0 fw-semibold">Fim:</label>
					<input type="date" id="dataFim" name="dataFim" value="@Model.DataFim.ToString("yyyy-MM-dd")" class="form-control me-3" />

					<button type="submit" class="btn btn-primary">Filtrar</button>
				</form>
			</div>
		</div>
	</div>


	<div class="row mb-4">
		<div class="col-md-4">
			<div class="card dashboard-card text-center">
				<div class="card-body">
					<h5 class="card-title">Total de Tarefas</h5>
					<p class="display-6 fw-bold text-primary">@Model.TotalTarefas</p>
				</div>
			</div>
		</div>

		<div class="col-md-4">
			<div class="card dashboard-card text-center">
				<div class="card-body">
					<h5 class="card-title">Dia Mais Produtivo</h5>
					<p class="fw-bold text-success" id="diaProdutivo">@Model.DiaMaisProdutivo - @Model.QuantidadeTarefasDiaMaisProdutivo tarefas</p>
				</div>
			</div>
		</div>

		<div class="col-md-4">
			<div class="card dashboard-card text-center">
				<div class="card-body">
					<h5 class="card-title">Projeto em Destaque</h5>
					<p class="fw-bold text-warning">⚡ @Model.ProjetoComMaisTarefas - @Model.QuantidadeTarefasProjeto tarefas</p>
				</div>
			</div>
		</div>
	</div>

	<div class="row">
		<div class="col-md-4 mb-4">
			<div class="card dashboard-card">
				<div class="card-body">
					<h5 class="card-title text-center">Tarefas por Classificação</h5>
					<canvas id="classificacaoChart"></canvas>
				</div>
			</div>
		</div>

		<div class="col-md-4 mb-4">
			<div class="card dashboard-card">
				<div class="card-body">
					<h5 class="card-title text-center">Tarefas por Cliente</h5>
					<canvas id="clienteChart"></canvas>
				</div>
			</div>
		</div>

		<div class="col-md-4 mb-4">
			<div class="card dashboard-card">
				<div class="card-body">
					<h5 class="card-title text-center">Tarefas por Dia da Semana</h5>
					<canvas id="diaSemanaChart"></canvas>
				</div>
			</div>
		</div>

		<div class="col-md-4 mb-4">
			<div class="card dashboard-card">
				<div class="card-body">
					<h5 class="card-title text-center">Tarefas por Projeto</h5>
					<canvas id="projetoTarefasChart"></canvas>
				</div>
			</div>
		</div>

		<div class="col-md-4 mb-4">
			<div class="card dashboard-card">
				<div class="card-body">
					<h5 class="card-title text-center">Tempo Gasto por Projeto</h5>
					<canvas id="tempoProjetoChart"></canvas>
				</div>
			</div>
		</div>
		<div class="col-md-4 mb-4">
			<div class="card dashboard-card">
				<div class="card-body">
					<h5 class="card-title text-center">Tempo Gasto por Classificação</h5>
					<canvas id="tempoClassChart"></canvas>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		let classificacaoChart;
		let clienteChart;
		let diaSemanaChart;
		let projetoChart;
		let tempoProjetoChart;
		let tempoClassChart;

		function renderClassificacaoChart(data) {
			if (classificacaoChart) classificacaoChart.destroy();

			const ctx = document.getElementById("classificacaoChart").getContext("2d");
			classificacaoChart = new Chart(ctx, {
				type: "bar",
				data: {
					labels: Object.keys(data),
					datasets: [{
						label: "Tarefas por Classificação",
						data: Object.values(data),
						backgroundColor: ["#007bff", "#28a745", "#ffc107", "#dc3545", "#6f42c1", "#20c997"]
					}]
				}
			});
		}

		function renderClienteChart(data) {
			if (clienteChart) clienteChart.destroy();

			const ctx = document.getElementById("clienteChart").getContext("2d");
			clienteChart = new Chart(ctx, {
				type: "bar",
				data: {
					labels: Object.keys(data),
					datasets: [{
						label: "Tarefas por Cliente",
						data: Object.values(data),
						backgroundColor: "#007bff"
					}]
				},
				options: {
					responsive: true,
					plugins: { legend: { display: false } }
				}
			});
		}

		function renderDiaSemanaChart(data) {
			if (diaSemanaChart) diaSemanaChart.destroy();

			const ctx = document.getElementById("diaSemanaChart").getContext("2d");
			diaSemanaChart = new Chart(ctx, {
				type: "line",
				data: {
					labels: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
					datasets: [{
						label: "Tarefas por Dia da Semana",
						data: data,
						borderColor: "#28a745",
						fill: false,
						tension: 0.3
					}]
				},
				options: { responsive: true }
			});
		}

		function renderProjetoChart(dataKeys, dataValues) {
			if (projetoChart) projetoChart.destroy();

			const ctx = document.getElementById("projetoTarefasChart").getContext("2d");
			projetoChart = new Chart(ctx, {
				type: "bar",
				data: {
					labels: dataKeys,
					datasets: [{
						data: dataValues,
						backgroundColor: ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8']
					}]
				},
				options: {
					plugins: { legend: { position: 'bottom' } }
				}
			});
		}

		function renderTempoProjetoChart(dataKeys, dataValues) {
			if (tempoProjetoChart) tempoProjetoChart.destroy();

			const ctx = document.getElementById("tempoProjetoChart").getContext("2d");
			tempoProjetoChart = new Chart(ctx, {
				type: "bar",
				data: {
					labels: dataKeys,
					datasets: [{
						label: "Tempo Gasto (horas)",
						data: dataValues.map(v => (v / 3600).toFixed(2)), // converte segundos para horas
						backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1', '#20c997']
					}]
				},
				options: {
					responsive: true,
					plugins: {
						legend: { display: true, position: 'bottom' }
					}
				}
			});
		}

		function renderTempoClassChart(dataKeys, dataValues) {
			if (tempoClassChart) tempoClassChart.destroy();

			const ctx = document.getElementById("tempoClassChart").getContext("2d");
			tempoClassChart = new Chart(ctx, {
				type: "bar",
				data: {
					labels: dataKeys,
					datasets: [{
						label: "Tempo Gasto (horas)",
						data: dataValues.map(v => (v / 3600).toFixed(2)), // converte segundos para horas
						backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1', '#20c997']
					}]
				},
				options: {
					responsive: true,
					plugins: {
						legend: { display: true, position: 'bottom' }
					}
				}
			});
		}

		// === Chamadas iniciais ===
		renderClassificacaoChart(@Html.Raw(JsonSerializer.Serialize(Model.TarefasPorClassificacao)));
		renderClienteChart(@Html.Raw(JsonSerializer.Serialize(Model.TarefasPorCliente)));
		renderDiaSemanaChart(@Html.Raw(JsonSerializer.Serialize(Model.TarefasPorDiaSemana)));
		renderProjetoChart(
		@Html.Raw(JsonSerializer.Serialize(Model.TarefasPorProjeto.Keys)),
		@Html.Raw(JsonSerializer.Serialize(Model.TarefasPorProjeto.Values))
		);
		renderTempoClassChart(
		@Html.Raw(JsonSerializer.Serialize(Model.TempoPorClassificacao.Keys)),
		@Html.Raw(JsonSerializer.Serialize(Model.TempoPorClassificacao.Values))
		);
		renderTempoProjetoChart(
		@Html.Raw(JsonSerializer.Serialize(Model.TempoPorProjeto.Keys)),
		@Html.Raw(JsonSerializer.Serialize(Model.TempoPorProjeto.Values))
		);
	</script>
}
